[
["index.html", "Auto Formation R avancé Chapitre 1 Introduction 1.1 Objectif 1.2 Ressources principales 1.3 Les participants", " Auto Formation R avancé Le groupe State Of The R in Roscoff 2017-08-31 Chapitre 1 Introduction 1.1 Objectif Le groupe State Of The R (SOTR) s’est réuni à Roscoff du 28 août 2017 au 1\\(^{\\mbox{er}}\\) septembre 2017 pour une semaine d’auto-formation autour du logiciel R. Différents sujets ont été abordés durant cette semaine Utilisation de git (surtout GitHub) Automatisation et reproductibilité du code : rmarkdown ( Chapitres 2, 3, 4), Manipulation de données :tidy (Chapitre 5) Programmation orientée objets : R6 class (Chapitre 6), Aspects techniques : Production de packages, Rcpp (Chapitre 7). Nous avons travaillé avec R (3.4.1) et Rstudio (1.1.350) sur les plateformes linux (ubuntu version &gt; 15.04), macosx (Sierra 10.12.6), windows (7). Ce livre résume les expériences des participants durant l’atelier. 1.2 Ressources principales http://rmarkdown.rstudio.com/ https://bookdown.org/yihui/blogdown/ https://bookdown.org/yihui/bookdown/ https://rstudio.github.io/learnr/ http://r4ds.had.co.nz/ http://adv-r.had.co.nz/ 1.3 Les participants Christophe Ambroise Julie Aubert \\(\\pi R\\) Barbillon Séverine Bord Mathieu Carmassi Julien Chiquet Jessica Cosmao-Tressou Sophie Donnet Marie-Pierre Etienne Marie Perrot-Dockes Timothée Tabouy "],
["rmarkdown.html", "Chapitre 2 RMarkdown 2.1 RMarkdown pour quoi faire ? 2.2 Comment ça marche 2.3 Un document RMarkdown à la loupe", " Chapitre 2 RMarkdown 2.1 RMarkdown pour quoi faire ? 2.1.1 Automatisation de la production de document scientifique Dans un contexte de science reproductible, produire Présentation, article, notes de cours, livre, … Code Données sous la forme de documents PDF, HTML, MS Word etc … Site web : http://rmarkdown.rstudio.com 2.2 Comment ça marche 2.2.1 Un exemple de fichier .Rmd : ce document Exemple d’un document RMarkdown 2.2.2 Schéma conceptuel Processus de production de documents 2.2.3 Markdown Un langage à balises très simple (version simplifiée de html par exemple) 2.2.3.1 Exemple ## Heading ### Sub-heading #### Another deeper heading Paragraphs are separated by a blank line. 2.2.4 Markdown Cheatsheet Tout le détail (rapide !) Détails sur Markdown 2.2.5 Pandoc C’est un convertisseur de format de documents. Il sait prendre un document d’un format x pour le passer en Markdown étendu prendre un document Markdown étendu pour le passer en un format y De fait il peut passer d’un format x à un format y https://pandoc.org/MANUAL.pdf 2.2.6 RMarkdown C’est un document pandoc avec des balises spécifiques R. http://rmarkdown.rstudio.com/lesson-1.html 2.2.7 De RMarkdown à un document finalisé avec knitr Le bouton knit effectue les opérations suivantes : Extraire la partie Markdown texte Executer le code R pour produire les sorties demandées Intégrer les sorties précédentes dans un document html, word ou pdf 2.3 Un document RMarkdown à la loupe 2.3.1 Entete du document : YAML Un exemple d’entête de fichier RMarkdown 2.3.2 Options globales pour le code R Les options du code R du document peuvent être spécifiées par défaut 2.3.3 Code Chunk ```{r} 2+2 ``` ## [1] 4 ou python, ou sql, bash …. 2.3.4 R Code Chunk, quelques options utiles ```{r, fig.show=&#39;hide&#39;, warning=TRUE, message=FALSE} data(cars) m &lt;- mean(cars$speed) plot(speed~dist) ``` La vitesse moyenne est `` r m ``. "],
["blogdown.html", "Chapitre 3 Blogdown pour créer un site 3.1 Principes de blogdown 3.2 Mise en oeuvre", " Chapitre 3 Blogdown pour créer un site 3.1 Principes de blogdown blogdown permet de gérer un site web à partir de pages statiques en markdown ou Rmarkdown. Le package R utilise le générateur de site Hugo. Les fichiers du site sont écrits dans le répertoire content et copiés pour devenir visible dans le répertoire public en passant par le répertoire static. 3.2 Mise en oeuvre 3.2.1 Préliminaires 3.2.1.1 Remarque MacOSX Commencer par installer homebrew https://brew.sh 3.2.1.2 Outils de base Installer une version supérieure à 1.1.350 Installer le package blogdown et Hugo install.packages(&#39;blogdown&#39;) library(&#39;blogdown&#39;) install_hugo() 3.2.2 Créer le projet par RStudio New project &gt; New Directory &gt; Website using blogdown Ne pas décocher “install hugo automatically” 3.2.3 Créer le post _index.md Le post doit être dans le répertoire principal (dégager “post”). Ce post sera la page d’accueil qui deviendra index.html dans le répertoire public 3.2.4 Visualisation du site web pour visualiser le site web, nous avons utilisé la commande Server Site du menu Addins proposé par `blogdown 3.2.5 Créer des pages additionnelles créer un post dans le répertoire principal le nom du fichier ne doit pas comporter de majuscule choisir l’extension Les hyperliens classiques markdown entre fichiers fonctionnent 3.2.5.1 Exemple Création d’un lien vers le fichier blogdown-pour-creer-un-site.Rmarkdown [Notre expérience blogdown](blogdown-pour-creer-un-site) 3.2.6 Gestion des images 3.2.6.1 Inclusion d’une images à la taille voulue les images sont stockées dans un sous répertoire du répertoire static. Dans l’exemple qui suit le répertoire des images est /static/images-markdown/ pour éviter les messages d’erreurs liés à l’édition du markdown, nous avons ajouté un champ resource-filesdans le YAML 3.2.6.2 Exemple --- title: Introduction à Rmarkdown author: &#39;&#39; date: &#39;2017-08-29&#39; resource_files: - ../static/ slug: introduction-a-rmarkdown categories: [] tags: [] --- Les images sont alors incluses comme suit: ```{r, out.width=&quot;50px&quot;, echo=TRUE, fig.show=&#39;hide&#39;} knitr::include_graphics(&quot;/images-markdown/ExempleMdFile.png&quot;, auto_pdf = TRUE, dpi = NA) ``` 3.2.7 Reste à faire publication en ligne changement de thème ou personnalisation du thème par défaut "],
["bookdown.html", "Chapitre 4 R Bookdown 4.1 Mise en oeuvre principe 4.2 Publication du livre sur GitHub", " Chapitre 4 R Bookdown Bookdown est un package R développé par Yihui Xe qui permet d’écrire des livres en format Rmarkdown pour les publier en pdf (via latex), epub, gitbook. Le principe de base consiste à utiliser un fichier Rmarkdown par chapitre. Une documentation assez exhaustive écrite pour l’auteur est disponible https://bookdown.org/yihui/bookdown/ Ce chapitre vise simplement à décrire notre expérience du l’utilisation du package. 4.1 Mise en oeuvre principe 1 . Installer le package bookdown via la CRAN ou bien via devtools install.packages(&quot;devtools&quot;) devtools::install_github(&quot;rstudio/bookdown&quot;) Utiliser RStudio pour créer un répertoire “bookproject” Par défaut les fichiers RMarkdown du répertoire du “bookproject” deviendront des chapitres, ordonnés ordres alphanumériques. Il est possible d’utiliser le fichier _bookdown.yml pour changer l’ordre des chapitres. La compilation peut être effectué pour un clic sur Build Book ou par la ligne rmarkdown::render_site(output_format = &#39;bookdown::gitbook&#39;, encoding = &#39;UTF-8&#39;) Les formats de sortie possibles sont - pdf - gitbook - epub Publication (voir section 4.2 ) 4.2 Publication du livre sur GitHub Il existe de nombreuses possiblilités de publication mais nous avons testé la solution github utilisant un répertoire docs Créer un repository git pour y mettre le contenu du bookproject Nommer le répertoire de sortie docs (à la place de _book) en ajoutant dans le fichier de configuration _bookdown.yml la ligne suivante output_dir: &quot;docs&quot; Dans le répertoire “docs” ajouter un fichier vide caché nommé .nojekyll {bash, eval=FALSE, echo=TRUE} touch .nojekyll git add .nojekyll "],
["tidyverse.html", "Chapitre 5 Découverte du tidyVerse 5.1 Motivations 5.2 Les packages du tidyverse 5.3 Exercice", " Chapitre 5 Découverte du tidyVerse 5.1 Motivations 5.1.1 Analyse de données processus d’analyse import: récupération des données tidy: mise en forme (tableau individus variables) transform: suppression/création/filtrage de variables/individus visualization: représentation des données et validation/illustration de l’analyse model: ajustement statistique communication: diffusion des résultats (page web / présentation / article) 5.1.2 Tidy data Les données collectées ne sont (jamais) sous forme canonique pour le statisticiens. “Happy families are all alike; every unhappy family is unhappy in its own way.” –– Leo Tolstoy “Tidy datasets are all alike, but every messy dataset is messy in its own way.” –– Hadley Wickham Intérêt facilite la manipulation, la visualisation et la modélisation une structure commune, utilisée par les packages du tydiverse Philosophie de représentation des données (indépendante de R) 5.1.3 Tidy vs non tidy: exemple table2 ## # A tibble: 12 x 4 ## country year type count ## &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;int&gt; ## 1 Afghanistan 1999 cases 745 ## 2 Afghanistan 1999 population 19987071 ## 3 Afghanistan 2000 cases 2666 ## 4 Afghanistan 2000 population 20595360 ## 5 Brazil 1999 cases 37737 ## 6 Brazil 1999 population 172006362 ## 7 Brazil 2000 cases 80488 ## 8 Brazil 2000 population 174504898 ## 9 China 1999 cases 212258 ## 10 China 1999 population 1272915272 ## 11 China 2000 cases 213766 ## 12 China 2000 population 1280428583 table1 ## # A tibble: 6 x 4 ## country year cases population ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 Afghanistan 1999 745 19987071 ## 2 Afghanistan 2000 2666 20595360 ## 3 Brazil 1999 37737 172006362 ## 4 Brazil 2000 80488 174504898 ## 5 China 1999 212258 1272915272 ## 6 China 2000 213766 1280428583 5.2 Les packages du tidyverse tibble: structure de données readr: lecture de données tidyr: tidyfication dplyr: transformation/ “wrangling” purrr: programmation fonctionnelle / traitement successif ggplot2 : visualisation 5.2.1 readr Import de données et création de tibble, version amélioré des data.frame (+ performant que les fonction de base) iris &lt;- read.csv(&quot;data/iris.csv&quot;) head(iris) ## sepal_length sepal_width petal_length petal_width species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa iris &lt;- readr::read_csv(&quot;data/iris.csv&quot;) iris ## # A tibble: 150 x 5 ## sepal_length sepal_width petal_length petal_width species ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa ## 7 4.6 3.4 1.4 0.3 setosa ## 8 5.0 3.4 1.5 0.2 setosa ## 9 4.4 2.9 1.4 0.2 setosa ## 10 4.9 3.1 1.5 0.1 setosa ## # ... with 140 more rows 5.2.2 tidyr Fonctions de mise au format tidy Évolution des fonctions classiques type reshape fonctions spread, gather, unite, separate iris_sepal &lt;- add_column(iris, ind = 1:nrow(iris)) iris_sepal &lt;- select(iris_sepal, ind, sepal_length, sepal_width, species) iris_sepal &lt;- gather(iris_sepal, key=&quot;attribute&quot;, value=&quot;measure&quot;, -species, -ind) iris_sepal &lt;- arrange(iris_sepal, ind) iris_sepal ## # A tibble: 300 x 4 ## ind species attribute measure ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1 setosa sepal_length 5.1 ## 2 1 setosa sepal_width 3.5 ## 3 2 setosa sepal_length 4.9 ## 4 2 setosa sepal_width 3.0 ## 5 3 setosa sepal_length 4.7 ## 6 3 setosa sepal_width 3.2 ## 7 4 setosa sepal_length 4.6 ## 8 4 setosa sepal_width 3.1 ## 9 5 setosa sepal_length 5.0 ## 10 5 setosa sepal_width 3.6 ## # ... with 290 more rows 5.2.3 dplyr Fonctions de transformation et manipulation de données select: sélection variables filter : sélection d’observations arrange : réordonner les observations mutate : créer de nouvelles variables à partir d’existante summarize: résumé de plusieurs variables et aussi rename, group_by by_species &lt;- group_by(iris, species) dplyr::summarize(by_species, moyenne = mean(sepal_length)) ## # A tibble: 3 x 2 ## species moyenne ## &lt;chr&gt; &lt;dbl&gt; ## 1 setosa 5.006 ## 2 versicolor 5.936 ## 3 virginica 6.588 5.2.4 purrr Définition de l’opérateur pipe %&gt;% pour “enchaîner” les traitement sur un tibble Force à la programmation fonctionnelle (une fonction = un argument, une sortie) iris_sepal &lt;- iris %&gt;% add_column(ind = 1:nrow(iris)) %&gt;% select(ind, sepal_length, sepal_width, species) %&gt;% gather(key=&quot;attribute&quot;, value=&quot;measure&quot;, -species, -ind) %&gt;% arrange(ind) iris_sepal ## # A tibble: 300 x 4 ## ind species attribute measure ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1 setosa sepal_length 5.1 ## 2 1 setosa sepal_width 3.5 ## 3 2 setosa sepal_length 4.9 ## 4 2 setosa sepal_width 3.0 ## 5 3 setosa sepal_length 4.7 ## 6 3 setosa sepal_width 3.2 ## 7 4 setosa sepal_length 4.6 ## 8 4 setosa sepal_width 3.1 ## 9 5 setosa sepal_length 5.0 ## 10 5 setosa sepal_width 3.6 ## # ... with 290 more rows 5.2.5 ggplot2 Outil de visualisation ggplot(iris, mapping = aes(x= species, y=sepal_length)) + geom_boxplot() ggplot(iris, mapping = aes(x= species, y=sepal_length, color = species)) + geom_jitter() ggplot(iris, mapping = aes(x= species, y=sepal_length, colour=species)) + geom_boxplot() + geom_jitter(alpha=0.5) + labs(title=&quot;un très beau graphe&quot;, x=&quot;espèce&quot;, y=&quot;longueur de sépale&quot;) ggplot(iris, mapping = aes(x= species, fill=species)) + geom_bar() + coord_polar() + theme_bw() by_attr &lt;- gather(iris, key = &quot;attribut&quot;, value=&quot;measurement&quot;, sepal_length,sepal_width, petal_length,petal_width) head(attr) ## ## 1 .Primitive(&quot;attr&quot;) ggplot(by_attr, mapping = aes(x=attribut, y=measurement, fill=species)) + geom_boxplot() ``` ggplot(by_attr, mapping = aes(x=attribut, y=measurement)) + geom_boxplot() + facet_grid(~species) ggplot(by_species, mapping = aes(x=sepal_width, y=sepal_length, group=species, colour=species)) + geom_smooth(method=lm) + geom_point() ggplot(by_species, mapping = aes(x=sepal_width, y=sepal_length, group=species, colour=species)) + geom_smooth(method=loess) + geom_point() 5.3 Exercice Lisez les données suivantes à l’adresse http://stat405.had.co.nz/data/pew.txt Transformez en une tibble à trois colonnes religion income effectif Pour les durs: calculez le salaire moyen par religion (après conversion en numerique du salaire) Pour vous aider : http://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf 5.3.1 Solution pew &lt;- readr::read_delim(file=&quot;http://stat405.had.co.nz/data/pew.txt&quot;, delim=&quot;\\t&quot;) ## Parsed with column specification: ## cols( ## religion = col_character(), ## `&lt;$10k` = col_integer(), ## `$10-20k` = col_integer(), ## `$20-30k` = col_integer(), ## `$30-40k` = col_integer(), ## `$40-50k` = col_integer(), ## `$50-75k` = col_integer(), ## `$75-100k` = col_integer(), ## `$100-150k` = col_integer(), ## `&gt;150k` = col_integer(), ## `Don&#39;t know/refused` = col_integer() ## ) pew &lt;- read_tsv(file=&quot;http://stat405.had.co.nz/data/pew.txt&quot;) ## Parsed with column specification: ## cols( ## religion = col_character(), ## `&lt;$10k` = col_integer(), ## `$10-20k` = col_integer(), ## `$20-30k` = col_integer(), ## `$30-40k` = col_integer(), ## `$40-50k` = col_integer(), ## `$50-75k` = col_integer(), ## `$75-100k` = col_integer(), ## `$100-150k` = col_integer(), ## `&gt;150k` = col_integer(), ## `Don&#39;t know/refused` = col_integer() ## ) tidy_pew &lt;- pew %&gt;% gather(key=&quot;income&quot;, value=&quot;effectif&quot;, -religion) convert &lt;- function(income) { convert.one &lt;- function(x) { switch(x, &quot;&lt;$10k&quot; = 5000, &quot;$10-20k&quot; = 15000, &quot;$20-30k&quot; = 25000, &quot;$30-40k&quot; = 35000, &quot;$40-50k&quot; = 45000, &quot;$50-75k&quot; = 62500, &quot;$75-100k&quot;= 87250, &quot;$100-150k&quot; = 125000, &quot;&gt;150k&quot; = 200000, NA ) } sapply(income, convert.one) } tidy_pew %&gt;% mutate(income.numeric = convert(income)) %&gt;% group_by(religion) %&gt;% summarise(mean.income = weighted.mean(income.numeric, effectif, na.rm=TRUE)) %&gt;% arrange(desc(mean.income)) ## # A tibble: 18 x 2 ## religion mean.income ## &lt;chr&gt; &lt;dbl&gt; ## 1 Hindu 109776.14 ## 2 Jewish 108197.60 ## 3 Atheist 85886.67 ## 4 Orthodox 83303.45 ## 5 Buddhist 79508.40 ## 6 Agnostic 79495.89 ## 7 Mainline Prot 73038.95 ## 8 Other Christian 72617.12 ## 9 Don’t know/refused 72049.68 ## 10 Other Faiths 70267.20 ## 11 Catholic 70061.73 ## 12 Other World Religions 69389.71 ## 13 Mormon 68732.91 ## 14 Muslim 65409.57 ## 15 Unaffiliated 65361.98 ## 16 Evangelical Prot 58589.36 ## 17 Jehovah&#39;s Witness 48588.48 ## 18 Historically Black Prot 47697.61 "],
["R6.html", "Chapitre 6 Programmation orientée object à l’aide de classe R6 6.1 Principes et buts 6.2 Structure d’une classe 6.3 Un exemple d’estimation de modèle linéaire 6.4 Un exemple d’estimation de modèle linéaire, sous-classes 6.5 Exemple d’utilisation 6.6 Autre paradigme 6.7 Code 6.8 Code (2) 6.9 Pour aboutir à un consensus 6.10 Quelques remarques et pour aller plus loin 6.11 Exercice 6.12 Quelques éléments 6.13 Présentation Julien", " Chapitre 6 Programmation orientée object à l’aide de classe R6 6.1 Principes et buts Principe : créer de nouvelles classes avec des attributs/champs (variables) définis et des méthodes (fonctions propres) un objet est alors intancié à partir d’une classe, créer des classes générales et des classes plus spécifiques qui héritent des clases générales. Intérêt : structurer le code, éviter de dupliquer le code, plus facile à débugger, plus robuste, plus lisible pour la diffusion, code à plusieurs. 6.2 Structure d’une classe library(R6) maclasse=R6class(&quot;maclasse&quot;, public=list( attr1=NULL, attr2=NULL, attr3=NULL, initialize=function(attr1=NA,attr2=NA) { self$attr1=attr1 self$attr2=attr2 private$check() } ), private=list( attr4=NULL, check=function() { if (self$attr1&lt;0) stop(&quot;attr1 must be positive&quot;) } ) ) self$ perm 6.3 Un exemple d’estimation de modèle linéaire linData &lt;- R6Class(&quot;linData&quot;, public = list( design = NULL, response = NULL, initialize = function(design = NA, response = NA) { self$design &lt;- design self$response &lt;- response self$check() self$EstmodLin() }, set.design = function(X) { self$design &lt;- X self$check() self$EstmodLin() }, set.response = function(y) { self$response &lt;- y self$check() self$EstmodLin() }, check = function(){ if(length(self$response) != nrow(self$design)){ stop(&quot;unconsistent dimension&quot;) } } ) ) 6.4 Un exemple d’estimation de modèle linéaire, sous-classes linData.Gaussien &lt;- R6Class(&quot;linData.Gaussien&quot;, inherit = linData, public = list( EstmodLin = function() { beta &lt;- solve(t(self$design) %*% self$design) %*% t(self$design) %*% self$response sigma2 &lt;- sum((self$response - self$design %*% beta)^2) /(nrow(self$design) - 2) obj &lt;- modLin.Gaussien$new(self$design, beta) obj$set.sigma2(sigma2) return(obj) } ) ) linData.Poisson &lt;- R6Class(&quot;linData.Poisson&quot;, inherit = linData, public = list( EstmodLin = function() { mod &lt;- glm(formula = self$response ~ self$design[, 2], family = &quot;poisson&quot;) obj &lt;- modLin.Poisson$new(self$design, mod$coefficients) return(obj) } ) ) 6.5 Exemple d’utilisation # Paramètres du modèle : X &lt;- cbind(rep(1, 20), runif(20, 0, 30)) beta &lt;- c(-5, 3) # Création de l&#39;objet modèle linéaire gaussien : dada &lt;- modLin.Gaussien$new(X, beta) dada$set.sigma2(1) Y &lt;- dada$rmodLin() #plot(dada$get.design()[,2], Y$get.response()) # Création de l&#39;objet d&#39;estimation des données : Y &lt;- Y$get.response() robert &lt;- linData.Gaussien$new(X, Y) res &lt;- robert$EstmodLin() res$get.beta() ## [,1] ## [1,] -4.800389 ## [2,] 2.996743 res$get.sigma2() ## [1] 0.9650992 6.6 Autre paradigme Pour l’instant, 1 classe = modèle probabiliste avec une fonction pour simuler des données 1 classe = données avec une fonction pour estimer les paramètres du modèles, renvoie un objet de type modèle probabiliste Vision globale 1 classe pour tout regrouper : données, estimations 6.7 Code library(R6) mod_lin &lt;- R6Class(&quot;mod_lin&quot;, public = list( X = NULL, n = NULL, p = NULL, Y.sim = NULL, Y.obs = NULL, beta.sim = NULL, beta.estim=NULL, sigma2.sim=NULL, sigma2.estim=NULL, initialize = function(X = NA) {self$X&lt;- X;self$n&lt;-nrow(X);self$p&lt;-ncol(X)}, check.inverse = function(){ D =det(t(self$X)%*%self$X); if(D!=0){print(&#39;X est de rang plein&#39;)}else{print(&#39;X n est pas de rang plein&#39;)} } ) ) 6.8 Code (2) mod_lin_gauss &lt;- R6Class(&quot;mod_lin_gauss&quot;, inherit = mod_lin, public = list( simu = function(beta,sigma2){ if(self$p==length(beta)){ self$beta.sim = beta; self$sigma2.sim = sigma2; self$Y.sim =self$X %*%matrix(beta,ncol=1) + sqrt(sigma2)*rnorm(self$n); return(self$Y.sim)} else{print(&#39;Problèmes de dimension&#39;)} }, estim = function(Y){ if(self$n==length(Y)){ self$beta.estim = c(solve(t(self$X)%*%self$X)%*%t(self$X)%*%matrix(Y,ncol=1)) self$sigma2.estim = sum((Y-c(self$X%*%matrix(self$beta.estim,ncol=1)))^2)/(self$n-self$p) self$Y.obs = Y; } } ) ) 6.9 Pour aboutir à un consensus Pour un utilisateur de notre méthode, ne fournir que la classe données avec une fonction estimate qui remplit un champ paramètre (estimé) créer éventuellement une classe modèle pour vérifier l’estimation mais ne pas le fournir à l’utilisateur. 6.10 Quelques remarques et pour aller plus loin privé public initialize à faire (maclasse$new() -&gt; correspond à la fonction définie initialize) méthode = fonction interne self dans la classe pour accéder à l’objet, ses champs et ses méthodes get et set bonne pratique de syntaxe ? intérêt maclasse$get.attr1() maclasse$attr1() initialize adaptable ? classes plus générales et faire hériter classe R6 a des fonctions propres (type clone) pour copier un objet 6.11 Exercice Coder la sous-classe correspondante au modèle linéaire généralisée pour une loi bernoulli (lien logit ou probit ?) Coder en classe votre modèle préféré 6.12 Quelques éléments set et get utile que pour les attributs déclarés en privé pour diffuser un code mieux vaut refaire une surcouche qui s’appelle de maniere classique avec une fonction et option exemple fitmod=function(X,Y,loi) { if (loi ==&quot;poisson&quot;) { obj=linData.Poisson(X,Y) obj$Estmodlin() } } initialize pas forcément utile si traitement simple, par contre on fait toujours un new pour créer un objet attention initialize est en public forcément lorsqu’on définit des fonctions ou attribut en privé faire private$ 6.13 Présentation Julien super$initialize pour appeler initilialize dont la fonction hérite classes pour réstultats de l’estimation des modèles classes pour les donnees et les caractéristiques des modèles a ajuster contient les fonctions pour estimer maclasse$set(&quot;public&quot;,&quot;mamethode&quot;, function() { ... } ) "],
["packages.html", "Chapitre 7 R packages", " Chapitre 7 R packages "],
["references.html", "References", " References "]
]
